#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin
OPT_DIR=$BP_DIR/opt
. $BIN_DIR/common

# parse args
APP_BUILD_DIR=$(cd $1; pwd)
CACHE_DIR=$2
ENV_DIR=$3

# Move app to a static build dir to keep paths the same between builds
BUILD_DIR="/tmp/scala_buildpack_build_dir"
mv $APP_BUILD_DIR $BUILD_DIR

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/util
. bin/java

export_env_dir $ENV_DIR

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# create default system.properties 
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

# install JDK 
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo "done"

# Start ADD NODEJS for front-end builds

cache_dir=$CACHE_DIR
build_dir=$BUILD_DIR

# Download node v0.10.26 from Heroku's S3 mirror of nodejs.org/dist
node_version="0.10.30"
status "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$build_dir/vendor/node/bin:$PATH

cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  npm rebuild 2>&1 | indent
elif test -d $cache_dir/node/node_modules; then
  status "Restoring node_modules directory from cache"
  cp -r $cache_dir/node/node_modules $build_dir/

  status "Pruning cached dependencies not specified in package.json"
  npm prune 2>&1 | indent

  if test -f $cache_dir/node/.heroku/node-version && [ $(cat $cache_dir/node/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    npm rebuild 2>&1 | indent
  fi

  if test -d $cache_dir/node/bower_components; then
    status "Restoring bower_components directory from cache"
    cp -r $cache_dir/node/bower_components $build_dir/
  fi

fi

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    status "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  status "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  npm install --userconfig $build_dir/.npmrc --production 2>&1 | indent

  status "Pruning cached bower components not specified in bower.json"
  bower prune 2>&1 | indent

  npm run build
)

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku

# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version

# Purge node-related cached content, being careful not to purge the top-level
# cache, for the sake of heroku-buildpack-multi apps.
rm -rf $cache_dir/node_modules # (for apps still on the older caching strategy)
rm -rf $cache_dir/node
mkdir -p $cache_dir/node

# If app has a node_modules directory, cache it.
if test -d $build_dir/node_modules; then
  status "Caching node_modules directory for future builds"
  cp -r $build_dir/node_modules $cache_dir/node
fi

if test -d $build_dir/bower_components; then
  status "Caching bower_components directory for future builds"
  cp -r $build_dir/bower_components $cache_dir/node
fi

# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/node

status "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"

echo "-----> Dropping NODE build directories from the slug"
rm -rf $BUILD_DIR/vendor
rm -rf $BUILD_DIR/bower_components
rm -rf $BUILD_DIR/node_modules

# End ADD NODEJS

# home directory from perspective of SBT; we rename
# it because otherwise the project root and $HOME
# are the same, and by default .sbt has a (different)
# meaning in those two places
SBT_USER_HOME=".sbt_home"
SBT_USER_HOME_ABSOLUTE="$BUILD_DIR/$SBT_USER_HOME"
# where we put the SBT binaries
SBT_BINDIR="$SBT_USER_HOME"/bin

# chdir as sbt expects
cd $BUILD_DIR

# unpack cache
CACHED_DIRS="$SBT_USER_HOME/.ivy2 $SBT_BINDIR target project/target project/boot"
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $CACHE_DIR $BUILD_DIR
done

# these are preliminary checks. actual version check happens below when attempting to download sbt boot.properties
if ! test -e project/build.properties; then
	echo " !      Error, your scala project must include project/build.properties and define sbt.version"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
        exit 1
fi

if ! has_supported_sbt_version ${BUILD_DIR}; then
	echo " !      Error, you have defined an unsupported sbt.version in project/build.properties"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
	exit 1
fi
 
SBT_VERSION="$(get_supported_sbt_version ${BUILD_DIR})"
SBT_JAR="sbt-launch.jar"
SBT_PROPS="sbt-$SBT_VERSION.boot.properties"
SBT_URL="http://typesafe.artifactoryonline.com/typesafe/ivy-releases/org.scala-sbt/sbt-launch/0.13.0/$SBT_JAR"
SBT_PROPS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-scala/$SBT_PROPS"
## in 0.10 start-script will depend on package, if packaging
## is required - it may not be, we can run .class files or a package-war
## instead.
SBT_TASKS="compile stage"

# To enable clean compiles, configure the environment to clean:
# $ heroku config:set SBT_CLEAN=true
# $ git push heroku master
# See: https://devcenter.heroku.com/articles/scala-support#clean-builds
[ "$SBT_CLEAN" = "true" ] && SBT_TASKS="clean $SBT_TASKS"

if [ ! -d .ivy2/cache ]; then
   mkdir -p .ivy2/cache
fi

if [ ! -f "$SBT_BINDIR"/"$SBT_JAR" ]; then
  mkdir -p "$SBT_BINDIR"
  cd "$SBT_BINDIR"

  ## clean up any old versions
  /bin/rm -f sbt sbt-launch-*.jar || true

  echo -n "-----> Downloading SBT..."
  curl --silent --max-time 60 -O --location $SBT_URL --fail || error "Failed to download $SBT_JAR"
  echo "done"

  echo "#!/usr/bin/env bash" > sbt
  echo "java -Dsbt.boot.properties=/app/.sbt_home/bin/sbt.boot.properties  -Duser.home=/app/.sbt_home -Divy.default.ivy.user.dir=/app/.sbt_home/.ivy2 -jar /app/.sbt_home/bin/$SBT_JAR \"\$@\"" >> sbt
  chmod a+x sbt

  cd $BUILD_DIR
fi

if [ -f $OPT_DIR/$SBT_PROPS ]; then
  cp -p $OPT_DIR/$SBT_PROPS $SBT_BINDIR/sbt.boot.properties
else
  error "Error, SBT version $SBT_VERSION not supported"
fi

# copy in heroku sbt plugin
HEROKU_PLUGIN="HerokuPlugin.scala"
mkdir -p "$SBT_USER_HOME/.sbt/plugins"
cp -p $OPT_DIR/$HEROKU_PLUGIN $SBT_USER_HOME/.sbt/plugins/$HEROKU_PLUGIN

# build app
echo "-----> Running: sbt $SBT_TASKS"
test -e "$SBT_BINDIR"/sbt.boot.properties && PROPS_OPTION="-Dsbt.boot.properties=$SBT_BINDIR/sbt.boot.properties"
HOME="$SBT_USER_HOME_ABSOLUTE" java -Xms768M -Xmx1024M -XX:MaxPermSize=512M -XX:+CMSClassUnloadingEnabled -Dfile.encoding=UTF8 -Duser.home="$SBT_USER_HOME_ABSOLUTE" -Dsbt.log.noformat=true -Divy.default.ivy.user.dir="$SBT_USER_HOME_ABSOLUTE/.ivy2" -Dsbt.global.base="$SBT_USER_HOME_ABSOLUTE" $PROPS_OPTION -jar "$SBT_BINDIR"/$SBT_JAR $SBT_TASKS 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with sbt"
  exit 1
fi

PROFILE_PATH="$BUILD_DIR/.profile.d/scala.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH

# repack cache
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS; do
  cache_copy $DIR $BUILD_DIR $CACHE_DIR
done

# drop useless directories from slug for play only
if is_play $BUILD_DIR ; then
  if [ -d $SBT_USER_HOME/.ivy2 ]; then
    echo "-----> Dropping ivy cache from the slug"
    rm -rf $SBT_USER_HOME/.ivy2
  fi
  if [ -d $BUILD_DIR/project/boot ] ; then
    echo "-----> Dropping project boot dir from the slug"
    rm -rf $BUILD_DIR/project/boot
  fi
  if [ -d $BUILD_DIR/target ] ; then
    echo "-----> Dropping compilation artifacts from the slug"
    rm -rf $BUILD_DIR/target/scala-*
    rm -rf $BUILD_DIR/target/streams
    rm -rf $BUILD_DIR/target/resolution-cache
  fi
fi

# Move compiled app back to where Heroku expects it
mv $BUILD_DIR $APP_BUILD_DIR
